@inbook{Spadini2018,
	title = "PyDriller: Python Framework for Mining Software Repositories",
	abstract = "Software repositories contain historical and valuable information about the overall development of software systems. Mining software repositories (MSR) is nowadays considered one of the most interesting growing fields within software engineering. MSR focuses on extracting and analyzing data available in software repositories to uncover interesting, useful, and actionable information about the system. Even though MSR plays an important role in software engineering research, few tools have been created and made public to support developers in extracting information from Git repository. In this paper, we present PyDriller, a Python Framework that eases the process of mining Git. We compare our tool against the state-of-the-art Python Framework GitPython, demonstrating that PyDriller can achieve the same results with, on average, 50% less LOC and significantly lower complexity.URL: https://github.com/ishepard/pydrillerMaterials: https://doi.org/10.5281/zenodo.1327363Pre-print: https://doi.org/10.5281/zenodo.1327411",
	author = "Spadini, Davide and Aniche, Maur√≠cio and Bacchelli, Alberto",
	year = "2018",
	doi = "10.1145/3236024.3264598",
	booktitle = "The 26th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE)",
}

@Article{Munaiah2017,
author="Munaiah, Nuthan
and Kroh, Steven
and Cabrey, Craig
and Nagappan, Meiyappan",
title="Curating GitHub for engineered software projects",
journal="Empirical Software Engineering",
year="2017",
month="Dec",
day="01",
volume="22",
number="6",
pages="3219--3253",
abstract="Software forges like GitHub host millions of repositories. Software engineering researchers have been able to take advantage of such a large corpora of potential study subjects with the help of tools like GHTorrent and Boa. However, the simplicity in querying comes with a caveat: there are limited means of separating the signal (e.g. repositories containing engineered software projects) from the noise (e.g. repositories containing home work assignments). The proportion of noise in a random sample of repositories could skew the study and may lead to researchers reaching unrealistic, potentially inaccurate, conclusions. We argue that it is imperative to have the ability to sieve out the noise in such large repository forges. We propose a framework, and present a reference implementation of the framework as a tool called reaper, to enable researchers to select GitHub repositories that contain evidence of an engineered software project. We identify software engineering practices (called dimensions) and propose means for validating their existence in a GitHub repository. We used reaper to measure the dimensions of 1,857,423 GitHub repositories. We then used manually classified data sets of repositories to train classifiers capable of predicting if a given GitHub repository contains an engineered software project. The performance of the classifiers was evaluated using a set of 200 repositories with known ground truth classification. We also compared the performance of the classifiers to other approaches to classification (e.g. number of GitHub Stargazers) and found our classifiers to outperform existing approaches. We found stargazers-based classifier (with 10 as the threshold for number of stargazers) to exhibit high precision (97{\%}) but an inversely proportional recall (32{\%}). On the other hand, our best classifier exhibited a high precision (82{\%}) and a high recall (86{\%}). The stargazer-based criteria offers precision but fails to recall a significant portion of the population.",
issn="1573-7616",
doi="10.1007/s10664-017-9512-6",
url="https://doi.org/10.1007/s10664-017-9512-6"
}

